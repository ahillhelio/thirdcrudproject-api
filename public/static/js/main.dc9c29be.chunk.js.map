{"version":3,"sources":["entryform.js","entryupdate.js","deleteentry.js","catalog_entries.js","App.js","serviceWorker.js","index.js"],"names":["EntryForm","state","name","definition","displayName","link","handleChange","target","key","setState","value","console","log","handleSubmit","event","preventDefault","fetch","process","method","headers","body","JSON","stringify","sources","then","props","refresh","onSubmit","this","type","placeholder","onChange","onClick","React","Component","EntryUpdate","entry","_id","DeleteEntry","deleteEntry","updateEntry","Entry","getEntry","response","json","data","isCreate","id","renderForm","result","displayEntry","map","entrySource","source","href","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc9c29be.chunk.js","sourcesContent":["import React from 'react';\n\nclass EntryForm extends React.Component{\n    state = { // what to do to get displayName and link under the umbrella of \"source\"?\n        name: \"\",\n        definition: \"\",\n        displayName: \"\",\n        link:\"\"\n    }\n\n    handleChange = ( {target} ) => {\n        const key = target.name;\n        this.setState({ [key] : target.value }, () => console.log(this.state[key]));\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n    \n\n        fetch(`${process.env.REACT_APP_API_URL}/api/catalog_entries`, {\n            method: \"POST\",\n            headers:{\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify([\n                { \n                    name : this.state.name, \n                    definition : this.state.definition, \n                    sources: [\n                        {\n                         displayName : this.state.displayName, \n                         link : this.state.link\n                        }\n                    ]\n                }\n            ]) \n        })\n        .then(this.props.refresh)\n        .then(() => this.setState({\n            name: \"\",\n            definition: \"\",\n            displayName: \"\",\n            link:\"\"\n        }));\n    }\n\n    render () {\n        return(\n            <form onSubmit={this.handleSubmit}> \n                <input \n                    name=\"name\" \n                    type=\"text\"\n                    value={this.state.name}\n                    placeholder= \"Entry\"\n                    onChange={this.handleChange}/>\n                \n                <input \n                    name=\"definition\" \n                    type=\"text\"\n                    value={this.state.definition}\n                    placeholder= \"Definition\"\n                    onChange={this.handleChange}/>\n            \n                <input \n                    name=\"displayName\" \n                    type=\"text\"\n                    value={this.state.displayName}\n                    placeholder= \"Display Name\"\n                    onChange={this.handleChange}/>\n               \n                <input \n                    name=\"link\" \n                    type=\"text\"\n                    value={this.state.link}\n                    placeholder= \"Link\"\n                    onChange={this.handleChange}/>\n\n                <input type=\"submit\" value=\"Add Entry\"/>\n                {/* Same question */}\n                <input type=\"button\" value=\"Cancel\" onClick={this.props.refresh}/> \n\n            </form>\n        ) \n    }\n\n}\n\nexport default EntryForm; ","import React from 'react';\n\nclass EntryUpdate extends React.Component {\n    state = { \n        name: this.props.entry.name,\n        definition: this.props.entry.definition,\n        //WHAT ABOUT THESE TWO BELOW? .sources?\n        displayName: this.props.entry.sources.displayName,\n        link:this.props.entry.link\n    }\n\n    handleChange = ( {target} ) => {\n        const key = target.name;\n        this.setState({ [key] : target.value }, () => console.log(this.state[key]));\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(`${process.env.REACT_APP_API_URL}/api/catalog_entries/${this.props.entry._id}`, {\n            method: 'PUT',\n            headers:{\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(\n                { \n                    name : this.state.name, \n                    definition : this.state.definition, \n                    sources: [\n                        {\n                         displayName : this.state.displayName, \n                         link : this.state.link\n                        }\n                    ]\n                }\n            ) \n        })\n        .then(this.props.refresh)\n        .then(() => this.setState({\n            name: \"\",\n            definition: \"\",\n            displayName: \"\",\n            link:\"\"\n        }));\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.handleSubmit}> \n                 <input \n                    name=\"name\" \n                    type=\"text\"\n                    value={this.state.name}\n                    //placeholder= \"Updated Entry Name \"\n                    onChange={this.handleChange}/>\n                \n                <input \n                    name=\"definition\" \n                    type=\"text\"\n                    value={this.state.definition}\n                    //placeholder= \"Update Definition\"\n                    onChange={this.handleChange}/>\n            \n                <input \n                    name=\"displayName\" \n                    type=\"text\"\n                    value={this.state.displayName} //WHAT NEEDS TO BE CHANGED? \n                    placeholder= \"Update Display Name\"\n                    onChange={this.handleChange}/>\n               \n                <input \n                    name=\"link\" \n                    type=\"text\"\n                    value={this.state.link}\n                    placeholder= \"Link\"\n                    onChange={this.handleChange}/>\n\n                <input type=\"submit\" value=\"Edit/Update Entry\"/>\n                <input type=\"button\" value=\"Cancel\" onClick={this.props.refresh}/>\n            </form>\n        )\n    }\n}\n\nexport default EntryUpdate; ","import React from 'react';\n\nconst DeleteEntry = ({entry, deleteEntry, updateEntry}) => {\n    return (\n        <>\n        <button onClick={() => deleteEntry(entry._id)}>DELETE ENTRY</button>\n        <br></br>\n        <button onClick={() => updateEntry(entry)}>EDIT ENTRY</button>\n        </>\n    )\n} \nexport default DeleteEntry;","import React, { Component } from 'react';\nimport EntryForm from './entryform';\nimport EntryUpdate from './entryupdate'\nimport DeleteEntry from './deleteentry'\n\nclass Entry extends Component { //do I need to do anything special to retrieve Array this time?\n    constructor(props){\n        super(props);\n        this.state ={\n            entry : [\n\n            ],\n            isCreate : true,\n        }\n    }\n\n        getEntry = () => {\n            fetch(`${process.env.REACT_APP_API_URL}/api/catalog_entries`) \n            .then(response => response.json())\n            .then(data => this.setState( {entry : data, isCreate: true } ));\n        };\n\n        updateEntry = (entry) => {\n            this.setState({\n                updateEntry: entry,\n                isCreate: false,\n            })\n        };\n\n        deleteEntry = (id) => {\n            fetch(`${process.env.REACT_APP_API_URL}/api/catalog_entries/${id}`, {\n                method: 'DELETE'\n            })\n            .then(response => response.json())\n            .then(console.log)\n            .then(this.getEntry);\n        }\n\n        renderForm = () => {\n            let result;\n            if (this.state.isCreate){\n                result = (<EntryForm key=\"createForm\" refresh={this.getEntry} />);\n            }else{\n                result = <EntryForm/>\n                const data = this.state.updateEntry;\n                result= <EntryUpdate key={data._id} entry={data} refresh={this.getEntry}/>;\n            }\n            return result;\n        };\n\n        componentDidMount (){ \n            this.getEntry();\n        };\n\n        render(){ \n            console.log(this.state.entry)\n            const displayEntry = this.state.entry.map((entry) => {\n\n                const entrySource = entry.sources.map((source) => {\n                        return (<div>\n                                Display Name: {source.displayName} \n                                <br></br>\n                                {/* Link: {source.link}  */}\n                                <a href={source.link}> Link to Resource </a>\n                                {/* //HTH Do I add an anchor tag? */}\n                        </div>)\n                })\n                    return (<div>\n                        Entry: {entry.name}\n                        <br></br>\n                        Definition: {entry.definition}  \n                        <br></br>\n                        {entrySource}\n                        <DeleteEntry entry={entry} \n                        deleteEntry={this.deleteEntry}\n                        updateEntry={this.updateEntry} //NEEDS TO BE ADDED\n                        />\n                    </div> \n                    )\n            \n            })      \n\n            console.log(this.state.entry);\n            return (\n                <>\n                <h2>ENTRIES</h2>\n                {this.renderForm()}\n                {displayEntry} \n                \n                </>\n            )\n        }            \n};\nexport default Entry; ","import React from 'react';\nimport Entry from './catalog_entries';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Entry/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}